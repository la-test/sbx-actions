name: Deploy

on:
  workflow_dispatch:
    inputs:
      key_code:
        description: 'Magic Wormhole key code'
        type: string
        required: true
      mailbox:
        description: 'Mailbox server'
        type: choice
        options:
          - 'wss://mailbox.mw.leastauthority.com/v1'
          - 'wss://mailbox.stage.mw.leastauthority.com/v1'
          - 'ws://relay.magic-wormhole.io:4000/v1'
        required: true
      transit:
        description: 'Transit server'
        type: choice
        options:
          - 'tcp:relay.mw.leastauthority.com:4001'
          - 'tcp:relay.stage.mw.leastauthority.com:4001'
          - 'tcp:transit.magic-wormhole.io:4001'
        required: true

jobs:
  check_cnx:
    name: Check connectivity
    runs-on: ubuntu-latest
    steps:
      - name: Pre-flight check
        run: |
          ls -lA .
          docker images

      - name: Checkout
        uses: actions/checkout@v3    

      - name: Create temp disk
        id: mk_tmp_disk
        uses: ./.github/actions/temp-disk-luks
        # with:
        #   root: .
        #   size: 4

      - name: Get secret via Magic Wormhole
        id: get_ssh_key
        uses: ./.github/actions/magic-wormhole-secret
        with:
          path: ${{ format('{0}/{1}', steps.mk_tmp_disk.outputs.mnt, '/ssh_key') }}
          code: ${{ inputs.key_code }}

      - name: Intermediate check
        run: |
          echo "Wormhole result:"
          echo "${{ steps.get_ssh_key.outputs.result }}"
          echo
          echo "Directory content:"
          ls -lA "${{ steps.mk_tmp_disk.outputs.mnt }}"
          echo
          echo "Docker local repository:"
          docker images
          echo "External IP address"
          curl -s 'https://ipv6.he.net/' | grep -Po '(?<=Your IP address is: ).+'

      - name: Load ssh key in agent
        run: |
          eval "$(ssh-agent -s)"
          chmod 0600 "${{ steps.mk_tmp_disk.outputs.mnt }}/ssh_key"
          ssh-add "${{ steps.mk_tmp_disk.outputs.mnt }}/ssh_key"
          ssh-add -L
          echo "SSH_AUTH_SOCK=${SSH_AUTH_SOCK}" >> $GITHUB_ENV

      - name: Cleanup temp disk
        run: |
          sudo umount "${{ steps.mk_tmp_disk.outputs.mnt }}"
          sudo cryptsetup close ${{ steps.mk_tmp_disk.outputs.uuid }}

      - name: Check ssh command
        run: |
          ssh -F ./ssh/config debian@vps-33320a1d.vps.ovh.net echo "My remote username is \$(whoami)"
