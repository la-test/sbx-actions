# Docker compose file to support dev+ops activities
version: '3'
services:
  # Ansible controller to test and run the playbooks
  # developed in this repository (under ./ansible)
  ansible-controller:
    build:
      context: docker/ansible
      dockerfile: Dockerfile
      args:
        user: appuser
        group: appgroup
        uid: "${_UID:-1000}"
        gid: "${_GID:-1000}"
    volumes:
      - .:/var/lib/appdata
      - ~/.ssh:/home/appuser/.ssh
      - ${SSH_AUTH_SOCK:-/dev/null}:/S.ssh-agent
    working_dir: /var/lib/appdata/ansible
    environment:
      # Tuning Ansible with SSH and GPG
      - ANSIBLE_FORCE_COLOR=true
      - ANSIBLE_SSH_COMMON_ARGS='-Fssh/config'
      - SSH_AUTH_SOCK=/S.ssh-agent
    stdin_open: true
    tty: true
    hostname: ansible-controller.local
    container_name: ansible-controller.local
    command: bash
    network_mode: "bridge"
    # Prevents container to hang the host
    # Requires `... --compatibility run ...`
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 256M

  tofu-shell:
    build:
      context: docker/tofu
      dockerfile: Dockerfile
      args:
        uid: "${_UID:-1000}"
        gid: "${_GID:-1000}"
    volumes:
      - .:/var/lib/appdata
    working_dir: /var/lib/appdata
    environment:
      # Required for AWS resources, starting with the state backend(s)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-eu-central-1}
      #- AWS_PROFILE=${AWS_PROFILE}
      # Required for deSEC resources
      - DESEC_API_TOKEN=${DESEC_API_TOKEN}
      # Required for Hetzner resources
      - TF_VAR_hcloud_token=${HCLOUD_TOKEN}
      # Required for OVH resources
      - OVH_ENDPOINT=${OVH_ENDPOINT}
      - OVH_CONSUMER_KEY=${OVH_CONSUMER_KEY}
      - OVH_APPLICATION_KEY=${OVH_APPLICATION_KEY}
      - OVH_APPLICATION_SECRET=${OVH_APPLICATION_SECRET}
    entrypoint: /bin/sh
    stdin_open: true
    tty: true
    hostname: tofu-shell.local
    container_name: tofu-shell.local
    network_mode: "bridge"
    # Prevents container to hang the host
    # Requires `... --compatibility run ...`
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 512M

  nodejs:
    build: 
      context: docker/nodejs
      dockerfile: Dockerfile
      args:
        uid: "${_UID:-1000}"
        gid: "${_GID:-1000}"
    volumes:
      - .:/var/lib/appdata
    working_dir: /var/lib/appdata
    stdin_open: true
    tty: true
    hostname: nodejs.local
    container_name: nodejs.local
    command: sh
    network_mode: "bridge"
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 256M

networks:
  bridge:
    external: true
