#!/usr/bin/env bash

# Configure bash behavior
set -o xtrace   # print every call to help debugging
set -o errexit  # exit on failed command
set -o nounset  # exit on undeclared variables
set -o pipefail # exit on any failed command in pipes

# Read the arguments
target=${1?"Unknown target"}
reference=${2-main}

# Read the revision from stdin
read -s -r -N 40 -t 1 rev || { echo "Could not read the 40 bytes long revision from stdin!"; exit 1; }
# Sanity check the revision
if ! [[ ${rev} =~ [0-9a-f]{40} ]]; then
  echo "Could not parse the 40 bytes long revision from stdin!"
  exit 1
fi

# Set some constants for our deployment
url_user='git'
url_host='github.com'
url_owner='la-test'
url_repo='sbx-actions'
url="${url_user}@${url_host}:${url_owner}/${url_repo}"
url_host_key='ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl'
ansible_opts=( '-i' 'inventory' '--limit' "${target}" "--connection" "local" )

# Overwrite (for now) the known_hosts with the git server key
test -d "${HOME}/.ssh" || mkdir "${HOME}/.ssh"
echo "${url_host} ${url_host_key}" > "${HOME}/.ssh/known_hosts"

# Generate an ssh key to checkout the code
SSH_KEY="${HOME}/.ssh/git_deploy_key"
test -f "${SSH_KEY}" || ssh-keygen -q -t ed25519 -f "${SSH_KEY}" -N=''
export GIT_SSH_COMMAND="ssh -i ${SSH_KEY}"
# Print the public key, in case it has not been yet authorized
echo "Public key used to access ${url_host}:"
cat "${SSH_KEY}.pub"

# Verify the authentication a few times to give a chance to authorize read access for a new key
(r=3;while ! (${GIT_SSH_COMMAND} -T "${url_user}@${url_host}" || [ $? -eq 1 ]); do ((--r))||exit;sleep 10;done)

# Use the key to checkout the code and show some info
cd /root
if [ ! -d "${url_repo}" ]; then
  git clone "${url}" "${url_repo}"
fi
cd "${url_repo}"
git fetch --all
git checkout "${rev}"

# Ensure ansible is installed as expected
python3 -m venv --system-site-packages --symlinks .venv
source .venv/bin/activate
pip install --no-cache --upgrade -r docker/ansible/requirements.txt

# Then check and apply the related ansible playbook
cd ansible
export LANG=C.UTF-8
export ANSIBLE_FORCE_COLOR=True
ansible-playbook "${ansible_opts[@]}" --check site.yml | cat -
ansible-playbook "${ansible_opts[@]}" site.yml | cat -
